{"title":"Communicating Research with Quarto","markdown":{"yaml":{"embed-resources":true},"headingText":"Communicating Research with Quarto","containsRefs":false,"markdown":"\n\n\n## Introduction\n\nQuarto provides a unified authoring framework for data science, combining your code, its results, and your prose. Quarto documents are fully reproducible and support dozens of output formats, like PDFs, Word files, presentations, and more.\n\n![](images/quarto_hex.png){fig-align=\"center\" width=\"100\"}\n\nQuarto files are designed to be used in three ways:\n\n1.  For communicating to decision-makers, who want to focus on the conclusions, not the code behind the analysis.\n2.  For collaborating with other data scientists (including future you!), who are interested in both your conclusions, and how you reached them (i.e. the code).\n3.  As an environment in which to do data science, as a modern-day lab notebook where you can capture not only what you did, but also what you were thinking.\n\nQuarto is a command line interface tool, not an R package. This means that help is, by-and-large, not available through ?. Instead, as you work through this chapter, and use Quarto in the future, you should refer to the Quarto documentation (https://quarto.org/).\n\n![](images/quarto_1.png){fig-align=\"center\" width=\"400\"}\n\n*Note*\n\n*Quarto documents are fully reproducible and support dozens of output formats, like PDFs, Word files, slideshows, and more.*\n\n*Need some help?*\n\n-   Download Quarto: *https://quarto.org/docs/get-started/*\n\n-   Quarto Guide: *https://quarto.org/docs/guide/*\n\n-   Markdown Reference Sheet: *Help \\> Markdown Quick Reference*\n\nYou'll need the Quarto Command Line Interface but it is automatically done by RStudio for you.\n\nLet us create one from RStudio now.\n\nTo create a new Quarto document (`.qmd`), select *File -\\> New File -\\> Quarto Document* in RStudio, then choose the file type you want to create. For now we will focus on a `.html` Document, which can be easily converted to other file types later.\n\nGo ahead and give a title.\n\nThe newly created `.qmd` file comes with basic instructions, let us go through it now.\n\nIt contains three important types of content:\n\n-   An (optional) YAML header surrounded by `---`\n-   Chunks of R code surrounded by ```` ``` ````\n-   Text mixed with formatting like `##` headings and simple text.\n\n*YAML stands for yet another markup language or YAML ain't markup language (a recursive acronym), which emphasizes that YAML is for data, not documents.*\n\nIn any case, it holds the metadata of the document and can be really helpful.\n\n## How does Quarto work?\n\nWhen you render a Quarto document, first knitr executes all of the code chunks and creates a new markdown (`.md`) document, which includes the code and its output. The markdown file generated is then processed by pandoc, which creates the finished format. The Render button encapsulates these actions and executes them in the right order for you.\n\n![](images/quarto_2.png){fig-align=\"center\" width=\"400\"}\n\n## Some Basics of the Markdown syntax\n\nLearn more about Markdown from the Guide: https://quarto.org/docs/authoring/markdown-basics.html\n\n\\bigskip\n\nWhen you open an `.qmd`, you get a notebook interface where code and output are interleaved. You can run each code chunk by clicking the Run icon (it looks like a play button at the top of the chunk), or by pressing `Ctrl + Shift + Enter`.\n\n\\bigskip\n\nRStudio executes the code and displays the results inline with the code by default. However, you can change it to display in the console instead by clicking on the gear icon and changing the *Chunk Output in Console* option.\n\n![Basic Markdown Syntax and its output](images/basics_markdown_syntax.png){fig-align=\"center\" width=\"400\"}\n\n![](images/qmd_output_options.png){fig-align=\"center\" width=\"160\"}\n\nYou can *render* the entire document with a single click of a button.\n\nGo ahead and give it a try. RStudio might prompt you to save the document first, save it in your working directory by giving it a suitable title.\n\nYou should now see some output like this:\n\n![HTML output of the QMD file](images/default_qmd_output.png){fig-align=\"center\" width=\"350\"}\n\n## Code Chunks\n\nThe knitr package extends the basic markdown syntax to include chunks of executable R code.\n\nWhen you render the report, knitr will run the code and add the results to the output file. You can have the output display just the code, just the results, or both.\n\nTo embed a chunk of R code into your report, surround the code with two lines that each contain three back ticks. After the first set of backticks, include {r}, which alerts knitr that you have included a chunk of R code. The result will look like this:\n\n![R Code Chunk](images/rchunk1.JPG){fig-align=\"center\" width=\"300\"}\n\nTo omit the results from your final report (and not run the code) add the argument `eval = FALSE` inside the brackets and after `r`. This will place a copy of your code into the report.\n\n![R Code Chunk with \\`eval\\` set to FALSE](images/rchunk2.JPG){fig-align=\"center\" width=\"300\"}\n\nTo omit the code from the final report (while including the results) add the argument `echo = FALSE`. This is very handy for adding plots to a report, since you usually do not want to see the code that generates the plot.\n\n![R Code Chunk with \\`echo\\` set to FALSE](images/rchunk3.JPG){fig-align=\"center\" width=\"300\"}\n\nRead more about R Code Chunks at <https://rmarkdown.rstudio.com/articles_intro.html>. You can also change this from the gear icon on the right of the code chunk\n\n### Inline R Code\n\nYou can also evaluate R expressions inline by enclosing the expression within a single back-tick qualified with `r`.\n\n`knitr` will replace the inline code with its result in your final document (inline code is always replaced by its result). The result will appear as if it were part of the original text. For example, the snippet above will appear like this:\n\n![Inline R code in RMarkdown documents](images/inline.JPG){fig-align=\"center\" width=\"300\"}\n\n![HTML output of the QMD file](images/default_qmd_output_1.png){fig-align=\"center\" width=\"400\"}\n\nNow let us try building our own `.qmd` document and add our own analysis. Let us use a new dataset for this purpose. So go ahead and delete everything below the YAML header.\n\n> The data we are going to use today is the data of deaths due to COVID-19 in Kerala state. This information is available from the Government of Kerala COVID-19 Dashboard <https://dashboard.kerala.gov.in/covid/>\n\nLets begin!\n\nWorkflow with Quarto\n\nCreate a new project and open a new `.qmd` file in the project.  \n\n```{r}\n#| include: false\n\noptions(tidyverse.quiet = TRUE)\nlibrary(tidyverse)\nlibrary(here)\nlibrary(readxl)\n```\n\n\n\nLoad Packages\n\n```{r}\n#| eval: false\n\nlibrary(tidyverse)\nlibrary(here)\nlibrary(rio)\n```\n\nLoad the Data\n\n```{r}\n#| message: false\n#| warning: false\n\nmortality_df <- rio::import(\n  here(\"data\", \n    \"GoK Dashboard  Official Kerala COVID-19 Statistics.xlsx\"),\n                       skip = 1)\n```\n\nCheck the dimensions of the data\n\n```{r}\nmortality_df |> dim()\n```\n\nYou can alternatively use `nrow()` and `ncol()`.\n\n```{r}\nmortality_df |> nrow()\nmortality_df |> ncol()\n```\n\nNow try to use them in the R inline code.\n\n\n\nHint: Use `` `r ` `` for inline code chunk like we discussed earlier. Inline R code chunks can be very useful when you are working with data.\n\n\nText in Quarto:\n\n```{md}\nThere are `r mortality_df |> nrow()` rows in the data \nand `r mortality_df |> ncol()` columns.\n```\n\nOutput:\n\nThere are  `r mortality_df |> nrow()` rows in the data and `r mortality_df |> ncol()` columns.\n\nCheck the variable names and clean them\n\nA good practice is to first check all the variable names and clean them using the `clean_names()` function from the `janitor` package\n\n```{r}\nmortality_df |> names()\n```\n\nLook at the difference in the `names()` of the dataset once it has been cleaned by `janitor`\n\n```{r}\nmortality_df |> janitor::clean_names() |>  names()\n```\n\n\n\n```{r}\n#| include: false\n\n\nmortality_df <- mortality_df |> janitor::clean_names()\n```\n\n\n```{r}\n#| eval: false\n\n\nskimr::skim(mortality_df)\n```\n\nThe `skim()` function shows that `date_reported`, `date_death`, and `sex` are `character` variables which might not be ideal. Let us transform them into the data types `date` and `factor`. also that `history_traveler_contact` are mostly `NA`.\n\nLet us drop the column  `history_traveler_contact`, `name` and `place` from our analysis\n\n```{r}\nmortality_df <- mortality_df |> \n  select(-c(history_traveler_contact, name, place))\n```\n\n\nLets check the class of `date_reported`.\n\n```{r}\nmortality_df |> pull(date_reported) |> class()\n```\n\nLets do some more cleaning of the variables\n\n\nWhen working with dates, the `lubridate` package is ideal. \n\n```{r}\n#| message: false\n#| warning: true\n\nlibrary(lubridate)\nmortality_df <- mortality_df |> \n  mutate(date_reported = lubridate::dmy(date_reported))\n```\n\nLets check the class of `date_reported` now\n\n```{r}\nmortality_df |> \n  pull(date_reported) |> \n  class()\n```\n\n\n\n*`pull()` is an excellent funtion that lets you pull a single varible from a dataset and perform operations. Read more about `pull()` in the Help menu.*\n\n\nLet us now look at the `sex` variable.\n\n```{r}\nmortality_df |> \n  pull(sex) |>\n  unique()\n```\n\nAfter some `mutate()` magic...\n\n```{r}\nmortality_df |> \n  mutate(sex = fct_collapse(sex, Male = \"male\")) |> \n  pull(sex) |> \n  unique()\n```\n\n\nWe can pipe multiple mutate() functions too..\n\n```{r}\nmortality_df <- mortality_df |> \n  mutate(date_of_death = lubridate::dmy(date_of_death)) |> \n  mutate(sex = fct_collapse(sex, Male = \"male\")) |> \n  mutate(sex = factor(sex, levels = c(\"Male\", \"Female\")))\n```\n\nLet us `drop_na()` for now\n\n```{r}\nmortality_df <- mortality_df |> drop_na()\n\n```\n\nLet us look at the number of rows now\n\n```{r}\n mortality_df |> nrow()\n```\n\nLet us look at the Districts \n\n```{r}\nmortality_df |> pull(district) |> unique() \n```\n\nLet us clean it\n\n```{r}\n\nmortality_df <- mortality_df |> \n mutate(district = str_to_sentence(district)) |> \n  mutate(district = fct_collapse(district,\n                                 Thiruvananthapuram = c(\n                                   \"Thiruvananthapura m\",\n                                   \"Thiruvananthapuram?K\"))) |> \n  mutate(district = fct_collapse(district, \n                                 Kollam = c(\n                                   \"Kollam?Thiruvanantha\"))) |> \n  mutate(district = fct_collapse(district, \n                                 Ernakulam = c(\n                                   \"Eranakulam\"))) |> \n  mutate(district = fct_collapse(district, \n                                 Kasaragod = c(\n                                   \"Kasargod\"))) |> \n  mutate(district = fct_collapse(district, \n                                 Kozhikode = c(\n                                   \"Kozhikode?Ernakulam\", \n                                   \"Kozhikode?Thiruvanan\"))) |> \n  mutate(district = fct_collapse(district, \n                                 Alappuzha = c(\n                                   \"Alappuzha?Kannur\"))) |> \n  mutate(district = fct_collapse(district, \n                                 Malappuram = c(\n                                   \"Malappuaram\"))) \n```\n\n\nLet us look at the number of Districts now\n\n```{r}\nmortality_df |> pull(district) |> unique() |> length()\n```\n\nLet us now create a new variable called `wave`. This will tell us if the death has happened in the first wave or second wave of COVID-19.\n\nFor the workshop's sake, let us consider April, 2021 as the cut off date for the first wave and second waves of COVID-19 in Kerala.\n\n```{r}\nmortality_df <- mortality_df |> \n   mutate(wave = if_else(date_of_death <= \"2021-04-01\", \n                        \"First Wave\", \n                        \"Second Wave\"))  \n```\n\n\nLet us create `age_group` variable\n\n```{r}\nmortality_df <- mortality_df |> mutate(age_group = case_when(\n  age < 60 ~ \"<60 Years\", TRUE ~ \">60 Years\"))\n```\n\nDistribution of Age and Gender\n\nLets look at the distribution age and sex among COVID-19 deaths in Kerala\n\n```{r}\nmortality_df |> pull(age) |> summary()\nmortality_df |> pull(sex) |> factor() |> summary()\nmortality_df |> group_by(sex) |> summarize(mean(age), sd(age))\n```\n\nUsing `gtsummary`\n\n```{r}\n#| message: false\n#| results: asis\n\nlibrary(gtsummary)\nage_sex_table <- mortality_df |>\n  dplyr::select(age, sex) |>  \n  tbl_summary(by = sex) |> \n  add_p()\n\n# using the {gt} package\nas_gt(age_sex_table) |> gt::as_latex()\n```\n\n\nUsing the inline R code you can:\n\n```{md}\nThe median (IQR) age (in years) among males and females are \n`r inline_text(age_sex_table, variable = age, \ncolumn = \"Male\")` \nand `r inline_text(age_sex_table, \nvariable = age, column = \"Female\"), respectively.\n```\n\nOutput:\n\nThe median (IQR) age (in years) among males and females are `r inline_text(age_sex_table, variable = age, column = \"Male\")` and `r inline_text(age_sex_table, variable = age, column = \"Female\")` , respectively.\n\nVisualize using `ggplot2`\n\n```{r}\nmortality_df |> \n  ggplot(aes(x = sex, y = age)) +\n  geom_boxplot()\n  \n```\n\nDistribution of Age groups and Waves\n\n```{r}\n#| message: false\n#| results: asis\n\nage_group_wave_table <- mortality_df |> \n  dplyr::select(age_group, wave) |>  \n  tbl_summary(by = wave) |> \n  add_p()\n\n# using the {gt} package\nas_gt(age_group_wave_table) |> gt::as_latex()\n\n\n```\n\n\n\nUsing the inline R code you can:\n\n```{md}\nThe number of deaths in the First wave and Second wave of COVID-19 are  \n`r inline_text(age_group_wave_table, variable = age_group, \nlevel = \"<60 Years\", column = \"First Wave\")` and \n`r inline_text(age_group_wave_table, variable = age_group, \nlevel = \">60 Years\", column = \"Second Wave\")` , respectively.\n```\n\nOutput:\n\nThe number of deaths in the First wave and Second wave of COVID-19 are  `r inline_text(age_group_wave_table, variable = age_group, level = \"<60 Years\", column = \"First Wave\")` and\n`r inline_text(age_group_wave_table, variable = age_group, level = \">60 Years\", column = \"Second Wave\")` , respectively.\n\n\nVisualize using `ggplot2`\n\n```{r}\nmortality_df |> \n  ggplot(aes(x = wave, fill = age_group)) +\n  geom_bar(position = \"dodge\")\n  \n```\nLets make more sense from this plot with some `mutate()` magic again..\n\n\n```{r}\ndf <- mortality_df |> \n  count(wave, age_group) |> \n  na.omit() |> \n  group_by(wave) |> \n  mutate(prop = (n / sum(n))*100) |> \n  ungroup()\n```\n\n\n```{r}\ndf |> \n  ggplot(aes(x = wave, y = prop,  fill = age_group)) +\n  geom_bar(position = \"dodge\", stat = \"identity\")\n  \n```\n\n\n\nNow let us render this!\n\n\n## Conclusion\n\n\n* Quarto is awesome. \n    * The ratio of markup to content is excellent. \n    * For exploratory analyses, blog posts, and interactive documents\n    * For journal articles, though knowledge on \\LaTeX will  be helpful.\n\n* The RStudio team have made the whole process very user friendly.\n    * RStudio provides useful short cut keys for compiling to HTML, and running code chunks. \n    * These shortcut keys are presented in a clear way.\n    * Code completion on R code chunk options is really helpful. See also [chunk options documentation on the knitr website](http://yihui.name/knitr/options).\n    \n\n<!-- Other recent posts on Quarto include those by : -->\n\n<!--   [Hello Quarto | mine çetinkaya-rundel](https://mine.quarto.pub/hello-quarto/) -->\n\n<!--   [Quarto in Two Hours | Tom Mock](https://jthomasmock.github.io/quarto-2hr-webinar/materials/01-intro-quarto.html) -->\n\n","srcMarkdownNoYaml":"\n\n# Communicating Research with Quarto\n\n## Introduction\n\nQuarto provides a unified authoring framework for data science, combining your code, its results, and your prose. Quarto documents are fully reproducible and support dozens of output formats, like PDFs, Word files, presentations, and more.\n\n![](images/quarto_hex.png){fig-align=\"center\" width=\"100\"}\n\nQuarto files are designed to be used in three ways:\n\n1.  For communicating to decision-makers, who want to focus on the conclusions, not the code behind the analysis.\n2.  For collaborating with other data scientists (including future you!), who are interested in both your conclusions, and how you reached them (i.e. the code).\n3.  As an environment in which to do data science, as a modern-day lab notebook where you can capture not only what you did, but also what you were thinking.\n\nQuarto is a command line interface tool, not an R package. This means that help is, by-and-large, not available through ?. Instead, as you work through this chapter, and use Quarto in the future, you should refer to the Quarto documentation (https://quarto.org/).\n\n![](images/quarto_1.png){fig-align=\"center\" width=\"400\"}\n\n*Note*\n\n*Quarto documents are fully reproducible and support dozens of output formats, like PDFs, Word files, slideshows, and more.*\n\n*Need some help?*\n\n-   Download Quarto: *https://quarto.org/docs/get-started/*\n\n-   Quarto Guide: *https://quarto.org/docs/guide/*\n\n-   Markdown Reference Sheet: *Help \\> Markdown Quick Reference*\n\nYou'll need the Quarto Command Line Interface but it is automatically done by RStudio for you.\n\nLet us create one from RStudio now.\n\nTo create a new Quarto document (`.qmd`), select *File -\\> New File -\\> Quarto Document* in RStudio, then choose the file type you want to create. For now we will focus on a `.html` Document, which can be easily converted to other file types later.\n\nGo ahead and give a title.\n\nThe newly created `.qmd` file comes with basic instructions, let us go through it now.\n\nIt contains three important types of content:\n\n-   An (optional) YAML header surrounded by `---`\n-   Chunks of R code surrounded by ```` ``` ````\n-   Text mixed with formatting like `##` headings and simple text.\n\n*YAML stands for yet another markup language or YAML ain't markup language (a recursive acronym), which emphasizes that YAML is for data, not documents.*\n\nIn any case, it holds the metadata of the document and can be really helpful.\n\n## How does Quarto work?\n\nWhen you render a Quarto document, first knitr executes all of the code chunks and creates a new markdown (`.md`) document, which includes the code and its output. The markdown file generated is then processed by pandoc, which creates the finished format. The Render button encapsulates these actions and executes them in the right order for you.\n\n![](images/quarto_2.png){fig-align=\"center\" width=\"400\"}\n\n## Some Basics of the Markdown syntax\n\nLearn more about Markdown from the Guide: https://quarto.org/docs/authoring/markdown-basics.html\n\n\\bigskip\n\nWhen you open an `.qmd`, you get a notebook interface where code and output are interleaved. You can run each code chunk by clicking the Run icon (it looks like a play button at the top of the chunk), or by pressing `Ctrl + Shift + Enter`.\n\n\\bigskip\n\nRStudio executes the code and displays the results inline with the code by default. However, you can change it to display in the console instead by clicking on the gear icon and changing the *Chunk Output in Console* option.\n\n![Basic Markdown Syntax and its output](images/basics_markdown_syntax.png){fig-align=\"center\" width=\"400\"}\n\n![](images/qmd_output_options.png){fig-align=\"center\" width=\"160\"}\n\nYou can *render* the entire document with a single click of a button.\n\nGo ahead and give it a try. RStudio might prompt you to save the document first, save it in your working directory by giving it a suitable title.\n\nYou should now see some output like this:\n\n![HTML output of the QMD file](images/default_qmd_output.png){fig-align=\"center\" width=\"350\"}\n\n## Code Chunks\n\nThe knitr package extends the basic markdown syntax to include chunks of executable R code.\n\nWhen you render the report, knitr will run the code and add the results to the output file. You can have the output display just the code, just the results, or both.\n\nTo embed a chunk of R code into your report, surround the code with two lines that each contain three back ticks. After the first set of backticks, include {r}, which alerts knitr that you have included a chunk of R code. The result will look like this:\n\n![R Code Chunk](images/rchunk1.JPG){fig-align=\"center\" width=\"300\"}\n\nTo omit the results from your final report (and not run the code) add the argument `eval = FALSE` inside the brackets and after `r`. This will place a copy of your code into the report.\n\n![R Code Chunk with \\`eval\\` set to FALSE](images/rchunk2.JPG){fig-align=\"center\" width=\"300\"}\n\nTo omit the code from the final report (while including the results) add the argument `echo = FALSE`. This is very handy for adding plots to a report, since you usually do not want to see the code that generates the plot.\n\n![R Code Chunk with \\`echo\\` set to FALSE](images/rchunk3.JPG){fig-align=\"center\" width=\"300\"}\n\nRead more about R Code Chunks at <https://rmarkdown.rstudio.com/articles_intro.html>. You can also change this from the gear icon on the right of the code chunk\n\n### Inline R Code\n\nYou can also evaluate R expressions inline by enclosing the expression within a single back-tick qualified with `r`.\n\n`knitr` will replace the inline code with its result in your final document (inline code is always replaced by its result). The result will appear as if it were part of the original text. For example, the snippet above will appear like this:\n\n![Inline R code in RMarkdown documents](images/inline.JPG){fig-align=\"center\" width=\"300\"}\n\n![HTML output of the QMD file](images/default_qmd_output_1.png){fig-align=\"center\" width=\"400\"}\n\nNow let us try building our own `.qmd` document and add our own analysis. Let us use a new dataset for this purpose. So go ahead and delete everything below the YAML header.\n\n> The data we are going to use today is the data of deaths due to COVID-19 in Kerala state. This information is available from the Government of Kerala COVID-19 Dashboard <https://dashboard.kerala.gov.in/covid/>\n\nLets begin!\n\nWorkflow with Quarto\n\nCreate a new project and open a new `.qmd` file in the project.  \n\n```{r}\n#| include: false\n\noptions(tidyverse.quiet = TRUE)\nlibrary(tidyverse)\nlibrary(here)\nlibrary(readxl)\n```\n\n\n\nLoad Packages\n\n```{r}\n#| eval: false\n\nlibrary(tidyverse)\nlibrary(here)\nlibrary(rio)\n```\n\nLoad the Data\n\n```{r}\n#| message: false\n#| warning: false\n\nmortality_df <- rio::import(\n  here(\"data\", \n    \"GoK Dashboard  Official Kerala COVID-19 Statistics.xlsx\"),\n                       skip = 1)\n```\n\nCheck the dimensions of the data\n\n```{r}\nmortality_df |> dim()\n```\n\nYou can alternatively use `nrow()` and `ncol()`.\n\n```{r}\nmortality_df |> nrow()\nmortality_df |> ncol()\n```\n\nNow try to use them in the R inline code.\n\n\n\nHint: Use `` `r ` `` for inline code chunk like we discussed earlier. Inline R code chunks can be very useful when you are working with data.\n\n\nText in Quarto:\n\n```{md}\nThere are `r mortality_df |> nrow()` rows in the data \nand `r mortality_df |> ncol()` columns.\n```\n\nOutput:\n\nThere are  `r mortality_df |> nrow()` rows in the data and `r mortality_df |> ncol()` columns.\n\nCheck the variable names and clean them\n\nA good practice is to first check all the variable names and clean them using the `clean_names()` function from the `janitor` package\n\n```{r}\nmortality_df |> names()\n```\n\nLook at the difference in the `names()` of the dataset once it has been cleaned by `janitor`\n\n```{r}\nmortality_df |> janitor::clean_names() |>  names()\n```\n\n\n\n```{r}\n#| include: false\n\n\nmortality_df <- mortality_df |> janitor::clean_names()\n```\n\n\n```{r}\n#| eval: false\n\n\nskimr::skim(mortality_df)\n```\n\nThe `skim()` function shows that `date_reported`, `date_death`, and `sex` are `character` variables which might not be ideal. Let us transform them into the data types `date` and `factor`. also that `history_traveler_contact` are mostly `NA`.\n\nLet us drop the column  `history_traveler_contact`, `name` and `place` from our analysis\n\n```{r}\nmortality_df <- mortality_df |> \n  select(-c(history_traveler_contact, name, place))\n```\n\n\nLets check the class of `date_reported`.\n\n```{r}\nmortality_df |> pull(date_reported) |> class()\n```\n\nLets do some more cleaning of the variables\n\n\nWhen working with dates, the `lubridate` package is ideal. \n\n```{r}\n#| message: false\n#| warning: true\n\nlibrary(lubridate)\nmortality_df <- mortality_df |> \n  mutate(date_reported = lubridate::dmy(date_reported))\n```\n\nLets check the class of `date_reported` now\n\n```{r}\nmortality_df |> \n  pull(date_reported) |> \n  class()\n```\n\n\n\n*`pull()` is an excellent funtion that lets you pull a single varible from a dataset and perform operations. Read more about `pull()` in the Help menu.*\n\n\nLet us now look at the `sex` variable.\n\n```{r}\nmortality_df |> \n  pull(sex) |>\n  unique()\n```\n\nAfter some `mutate()` magic...\n\n```{r}\nmortality_df |> \n  mutate(sex = fct_collapse(sex, Male = \"male\")) |> \n  pull(sex) |> \n  unique()\n```\n\n\nWe can pipe multiple mutate() functions too..\n\n```{r}\nmortality_df <- mortality_df |> \n  mutate(date_of_death = lubridate::dmy(date_of_death)) |> \n  mutate(sex = fct_collapse(sex, Male = \"male\")) |> \n  mutate(sex = factor(sex, levels = c(\"Male\", \"Female\")))\n```\n\nLet us `drop_na()` for now\n\n```{r}\nmortality_df <- mortality_df |> drop_na()\n\n```\n\nLet us look at the number of rows now\n\n```{r}\n mortality_df |> nrow()\n```\n\nLet us look at the Districts \n\n```{r}\nmortality_df |> pull(district) |> unique() \n```\n\nLet us clean it\n\n```{r}\n\nmortality_df <- mortality_df |> \n mutate(district = str_to_sentence(district)) |> \n  mutate(district = fct_collapse(district,\n                                 Thiruvananthapuram = c(\n                                   \"Thiruvananthapura m\",\n                                   \"Thiruvananthapuram?K\"))) |> \n  mutate(district = fct_collapse(district, \n                                 Kollam = c(\n                                   \"Kollam?Thiruvanantha\"))) |> \n  mutate(district = fct_collapse(district, \n                                 Ernakulam = c(\n                                   \"Eranakulam\"))) |> \n  mutate(district = fct_collapse(district, \n                                 Kasaragod = c(\n                                   \"Kasargod\"))) |> \n  mutate(district = fct_collapse(district, \n                                 Kozhikode = c(\n                                   \"Kozhikode?Ernakulam\", \n                                   \"Kozhikode?Thiruvanan\"))) |> \n  mutate(district = fct_collapse(district, \n                                 Alappuzha = c(\n                                   \"Alappuzha?Kannur\"))) |> \n  mutate(district = fct_collapse(district, \n                                 Malappuram = c(\n                                   \"Malappuaram\"))) \n```\n\n\nLet us look at the number of Districts now\n\n```{r}\nmortality_df |> pull(district) |> unique() |> length()\n```\n\nLet us now create a new variable called `wave`. This will tell us if the death has happened in the first wave or second wave of COVID-19.\n\nFor the workshop's sake, let us consider April, 2021 as the cut off date for the first wave and second waves of COVID-19 in Kerala.\n\n```{r}\nmortality_df <- mortality_df |> \n   mutate(wave = if_else(date_of_death <= \"2021-04-01\", \n                        \"First Wave\", \n                        \"Second Wave\"))  \n```\n\n\nLet us create `age_group` variable\n\n```{r}\nmortality_df <- mortality_df |> mutate(age_group = case_when(\n  age < 60 ~ \"<60 Years\", TRUE ~ \">60 Years\"))\n```\n\nDistribution of Age and Gender\n\nLets look at the distribution age and sex among COVID-19 deaths in Kerala\n\n```{r}\nmortality_df |> pull(age) |> summary()\nmortality_df |> pull(sex) |> factor() |> summary()\nmortality_df |> group_by(sex) |> summarize(mean(age), sd(age))\n```\n\nUsing `gtsummary`\n\n```{r}\n#| message: false\n#| results: asis\n\nlibrary(gtsummary)\nage_sex_table <- mortality_df |>\n  dplyr::select(age, sex) |>  \n  tbl_summary(by = sex) |> \n  add_p()\n\n# using the {gt} package\nas_gt(age_sex_table) |> gt::as_latex()\n```\n\n\nUsing the inline R code you can:\n\n```{md}\nThe median (IQR) age (in years) among males and females are \n`r inline_text(age_sex_table, variable = age, \ncolumn = \"Male\")` \nand `r inline_text(age_sex_table, \nvariable = age, column = \"Female\"), respectively.\n```\n\nOutput:\n\nThe median (IQR) age (in years) among males and females are `r inline_text(age_sex_table, variable = age, column = \"Male\")` and `r inline_text(age_sex_table, variable = age, column = \"Female\")` , respectively.\n\nVisualize using `ggplot2`\n\n```{r}\nmortality_df |> \n  ggplot(aes(x = sex, y = age)) +\n  geom_boxplot()\n  \n```\n\nDistribution of Age groups and Waves\n\n```{r}\n#| message: false\n#| results: asis\n\nage_group_wave_table <- mortality_df |> \n  dplyr::select(age_group, wave) |>  \n  tbl_summary(by = wave) |> \n  add_p()\n\n# using the {gt} package\nas_gt(age_group_wave_table) |> gt::as_latex()\n\n\n```\n\n\n\nUsing the inline R code you can:\n\n```{md}\nThe number of deaths in the First wave and Second wave of COVID-19 are  \n`r inline_text(age_group_wave_table, variable = age_group, \nlevel = \"<60 Years\", column = \"First Wave\")` and \n`r inline_text(age_group_wave_table, variable = age_group, \nlevel = \">60 Years\", column = \"Second Wave\")` , respectively.\n```\n\nOutput:\n\nThe number of deaths in the First wave and Second wave of COVID-19 are  `r inline_text(age_group_wave_table, variable = age_group, level = \"<60 Years\", column = \"First Wave\")` and\n`r inline_text(age_group_wave_table, variable = age_group, level = \">60 Years\", column = \"Second Wave\")` , respectively.\n\n\nVisualize using `ggplot2`\n\n```{r}\nmortality_df |> \n  ggplot(aes(x = wave, fill = age_group)) +\n  geom_bar(position = \"dodge\")\n  \n```\nLets make more sense from this plot with some `mutate()` magic again..\n\n\n```{r}\ndf <- mortality_df |> \n  count(wave, age_group) |> \n  na.omit() |> \n  group_by(wave) |> \n  mutate(prop = (n / sum(n))*100) |> \n  ungroup()\n```\n\n\n```{r}\ndf |> \n  ggplot(aes(x = wave, y = prop,  fill = age_group)) +\n  geom_bar(position = \"dodge\", stat = \"identity\")\n  \n```\n\n\n\nNow let us render this!\n\n\n## Conclusion\n\n\n* Quarto is awesome. \n    * The ratio of markup to content is excellent. \n    * For exploratory analyses, blog posts, and interactive documents\n    * For journal articles, though knowledge on \\LaTeX will  be helpful.\n\n* The RStudio team have made the whole process very user friendly.\n    * RStudio provides useful short cut keys for compiling to HTML, and running code chunks. \n    * These shortcut keys are presented in a clear way.\n    * Code completion on R code chunk options is really helpful. See also [chunk options documentation on the knitr website](http://yihui.name/knitr/options).\n    \n\n<!-- Other recent posts on Quarto include those by : -->\n\n<!--   [Hello Quarto | mine çetinkaya-rundel](https://mine.quarto.pub/hello-quarto/) -->\n\n<!--   [Quarto in Two Hours | Tom Mock](https://jthomasmock.github.io/quarto-2hr-webinar/materials/01-intro-quarto.html) -->\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"embed-resources":true,"output-file":"quarto.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}