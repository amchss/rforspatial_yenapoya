{"title":"Fundamentals of Working with Data","markdown":{"yaml":{"embed-resources":true},"headingText":"Fundamentals of Working with Data","containsRefs":false,"markdown":"\n\n\n:::{style=\"text-align:justify\"}\n\nIn this section, we will be learning how to import, and export data from R. We will also be talking about the different file types. This section is based on the relevant chapters from two of the renowned textbooks on `tidyverse`.[^chapter_4_working_with_data-1] These textbooks take different approaches for importing and working with data in RStudio using `tidyverse` packages. We present to you the most optimal workflows to facilitate reproducibility and ease of understanding.\n\n[^chapter_4_working_with_data-1]: [`Tidyverse` Skills for Data Science](https://jhudatascience.org/tidyversecourse/get-data.html) and [The `Tidyverse` Cookbook](https://rstudio-education.github.io/tidyverse-cookbook/import.html)\n\n:::\n\n## Before we get started\n\n:::{style=\"text-align:justify\"}\n\nLet us recap once again creating a project in R. It is a best practice to use create a project for each data analysis you are planning to perform. You can create a New Project using the File menu in RStudio. Let us create one now!\n  \n  Reading and writing files often involves the use of file paths. A file path is a string of characters that point R and RStudio to the location of the file on your computer.\n\nThese file paths can be a complete location[^chapter_4_working_with_data-2] or just the file name.[^chapter_4_working_with_data-3] If you pass R a partial file path, R will append it to the end of the file path that leads to your working directory. The working directory is the directory where your `.Rproj` file is.\n\n[^chapter_4_working_with_data-2]: Eg: `C:/Users/Arun/RIntro_Book.Rmd`\n\n[^chapter_4_working_with_data-3]: Eg: `RIntro_Book.Rmd`\n\nRun `here::here()` to see the file path that leads to your current working directory.\n\n:::\n\n## Importing data using the RStudio GUI\n\n:::{style=\"text-align:justify\"}\n\nThe RStudio IDE provides an Import Dataset button in the Environment pane, which appears in the top right corner of the IDE by default. You can use this button to import data that is stored in plain text files as well as in Excel, SAS, SPSS, and Stata files.\n\n![](images/import_dataset_1.png){fig-align=\"center\"}\n\nWe recommend using `.csv` file type to read and write your data as a best practice. This will ensure cross compatibility between various programs as it is just a raw text file but just separated by a comma.\n\n**Note**\n  \n  There are different packages to import different types of data.\n\n-   `haven` : SPSS, Stata, or SAS\n-   `readxl` : Excel spreadsheets\n-   `readr` : csv, txt, tsv etc.\n\nHowever, we recommend using the `rio` package.\n\n![](images/rio_hex.png){fig-align=\"center\" width=\"125\"}\n\nThere are two main functions in the `rio` package, `import()` and `export()`. The `import()` function takes the file path as an input argument, while the `export()` function takes the object and destination file path as arguments.\n\nThe `import()` function has an additional argument `setclass` which needs to be set to `tibble` to import the data as a `tibble` (the workhorse of `tidyverse` workflows).\n\n![](images/tibble.jpg){fig-align=\"center\" width=\"100\"}\n\nThere are a number of differences between tibbles and data.frames. To see a full vignette about tibbles and how they differ from data.frame, please run `vignette(\"tibble\")` in the console and read through that vignette.\n\nSome major differences are:\n  \n  -   Input type remains unchanged - `data.frame` changes strings as factors; `tibble` will not\n-   Variable names remain unchanged - `data.frame` will remove spaces or add \"x\" before numeric column names. `tibble` will not.\n-   There are no `row.names()` for a `tibble`\n-   `tibble` print first ten rows and columns that fit on one screen\n\n#### Exercise {.unnumbered}\n\n1.  Import the provided .csv file into the RStudio environment using the method mentioned above.\n\n2.  Can you see anything apprearing on the RStudio Console pane once you have imported the file?\n  \n  3.  Can you see anything apprearing on the RStudio Environment pane once you have imported the file?\n  \n  4.  Import the provided .xls file into the RStudio environment using the method mentioned above.\n\n5.  Change the sheet to import as well as skip the first row. See the changes happen in the R code syntax in the bottom right pane of the GUI\n\n:::\n\n## Saving and Loading a compressed .rds file\n\n:::{style=\"text-align:justify\"}\n\n`.rds` is a file format native to R for saving compressed content. `.rds` files are not text files and are not human readable in their raw form. Each `.rds` file contains a single object, which makes it easy to assign its output directly to a single R object. This is not necessarily the case for `.RData` files, which makes `.rds` files safer to use.\n\nUse the `write_rds()` function from the `readr` package to write an `.rds` file. Save the previously loaded data, as an `.rds` file using this function. You can look at the help menu to know more on the syntax or you can type `?write_rds` in the Console pane.\n\nNow you can open your file explorer go to your working directory and check if the file has been saved. Similarly, you can use the `write_csv()` function from the `readr` package to write a `.csv` file.\n\n:::\n\n## Principles of Tidy Data\n\n### What is Tidy Data?\n\n:::{style=\"text-align:justify\"}\n\n> Tidy data is a way to describe data that's organized with a particular structure -- a rectangular structure, where each variable has its own column, and each observation has its own row. --- Hadley Wickham, 2014\n\n:::\n\n### Three Rules of Tidy Data\n\n:::{style=\"text-align:justify\"}\n\n1.  Each variable must have its own column.\n2.  Each observation must have its own row.\n3.  Each value must have its own cell.\n\nThese three rules are interrelated because it's impossible to only satisfy two of the three.\n\n:::\n\n![](images/tidy-1.png){fig-align=\"center\"}\n\n### Messy Data vs Tidy Data\n\n> Tidy datasets are all alike, but every messy dataset is messy in its own way. - Hadley Wickham\n\n![Source: R for Data Science (http://r4ds.had.co.nz/)](images/messy_tidy.png){fig-align=\"center\" width=\"500\"}\n\n![](images/tidy_messy.JPG){fig-align=\"center\" width=\"400\"}\n\n{{< pagebreak >}}\n\n![](images/untidy_tools.JPG){fig-align=\"center\" width=\"400\"}\n\n:::{style=\"text-align:justify\"}\n\nWorking with messy data can be messy!. You need to build custom tools from scratch each time you work with a new dataset.\n\nIllustrations from : <https://github.com/allisonhorst/stats-illustrations>\n  \n:::\n\n### Tidy data for more efficient data science\n\n:::{style=\"text-align:justify\"}\n  \nPackages like `tidyr` and `dplyr` can enable you to get on with analysing your data and start answering key questions rather than spending time in trying to clean the data.\n  \n:::\n\n![](images/tidy-2.png){fig-align=\"center\" width=\"400\"}\n\n{{< pagebreak >}}\n\n![](images/tidy_tools_1.JPG){fig-align=\"center\" width=\"200\"}\n\n:::{style=\"text-align:justify\"}\n\n*Note*\n  \n  *Tidy data allows you to be more efficient by using specialised tools built for the tidy workflow. There are a lot of tools specifically built to wrangle untidy data into tidy data.*\n  \n  ![](images/tidy_workflow.JPG){fig-align=\"center\" width=\"300\"}\n\nOne other advantage of working with Tidy data is that it makes it easier for collaboration, as your colleagues can use the same familiar tools rather than getting overwhelmed with all the work you did from scratch. It is also helpful for your future self as it becomes a consistent workflow and takes less adjustment time for any incremental changes.\n\n\\bigskip\n\nTidy data also makes it easier to reproduce analyses because they are easier to understand, update, and reuse. By using tools together that all expect tidy data as inputs, you can build and iterate really powerful workflows.\n\n:::\n\n## A word on Tibble\n\n:::{style=\"text-align:justify\"}\n\nWhen loading data into R using the RStudio GUI using `tidyverse`, the data is automatically saved as a `tibble`. A `tibble` is a data frame, but they have some new functionalities and properties to make our life easier. It is the single most important workhorse of `tidyverse`.\n\n![tibble() vs data.frame()](images/tibble_1.jpg){fig-align=\"center\" width=\"300\"}\n\n\nYou can change `data.frame` objects to a `tibble` using the `as_tibble()` function.\n\n:::\n\n## Working with Tibbles\n\n:::{style=\"text-align:justify\"}\n\nNow that you have imported data into RStudio its a good practice to have a look at the data. There are many ways you can do it within RStudio.\n\n1.  Through the Environment pane\n2.  `View()` function\n3.  Simply typing the name of the dataset in the Console\n\n\\bigskip\n\nSome other things you can do to have a look at your data are:\n  \n  1.  Checking the class of the dataset using `class()` function\n2.  Checking the structure of the dataset using `str()` function\n\n*Note*\n  \n  *`class()` and `str()` are not just limited to datasets, they can be used for any R objects.*\n  \n  \\bigskip\n\nSome additional tips for quickly looking at your data:\n  \n-   `head()`\n-   `tail()`\n-   `glimpse()`\n\n:::\n\n#### Exercise {.unnumbered}\n\n:::{style=\"text-align:justify\"}\n\n1.  Type the name of the dataset in the console and see what happens?\n  \n  2.  How many rows and columns can you visualize?\n  \n  3.  Now, try the head(), tail(), and glimpse() functions\n\n4.  Try to create a tibble manually in RStudio with a numeric, character, and factor variable. (Hint: vignette('tibble') )\n\n:::","srcMarkdownNoYaml":"\n\n# Fundamentals of Working with Data\n\n:::{style=\"text-align:justify\"}\n\nIn this section, we will be learning how to import, and export data from R. We will also be talking about the different file types. This section is based on the relevant chapters from two of the renowned textbooks on `tidyverse`.[^chapter_4_working_with_data-1] These textbooks take different approaches for importing and working with data in RStudio using `tidyverse` packages. We present to you the most optimal workflows to facilitate reproducibility and ease of understanding.\n\n[^chapter_4_working_with_data-1]: [`Tidyverse` Skills for Data Science](https://jhudatascience.org/tidyversecourse/get-data.html) and [The `Tidyverse` Cookbook](https://rstudio-education.github.io/tidyverse-cookbook/import.html)\n\n:::\n\n## Before we get started\n\n:::{style=\"text-align:justify\"}\n\nLet us recap once again creating a project in R. It is a best practice to use create a project for each data analysis you are planning to perform. You can create a New Project using the File menu in RStudio. Let us create one now!\n  \n  Reading and writing files often involves the use of file paths. A file path is a string of characters that point R and RStudio to the location of the file on your computer.\n\nThese file paths can be a complete location[^chapter_4_working_with_data-2] or just the file name.[^chapter_4_working_with_data-3] If you pass R a partial file path, R will append it to the end of the file path that leads to your working directory. The working directory is the directory where your `.Rproj` file is.\n\n[^chapter_4_working_with_data-2]: Eg: `C:/Users/Arun/RIntro_Book.Rmd`\n\n[^chapter_4_working_with_data-3]: Eg: `RIntro_Book.Rmd`\n\nRun `here::here()` to see the file path that leads to your current working directory.\n\n:::\n\n## Importing data using the RStudio GUI\n\n:::{style=\"text-align:justify\"}\n\nThe RStudio IDE provides an Import Dataset button in the Environment pane, which appears in the top right corner of the IDE by default. You can use this button to import data that is stored in plain text files as well as in Excel, SAS, SPSS, and Stata files.\n\n![](images/import_dataset_1.png){fig-align=\"center\"}\n\nWe recommend using `.csv` file type to read and write your data as a best practice. This will ensure cross compatibility between various programs as it is just a raw text file but just separated by a comma.\n\n**Note**\n  \n  There are different packages to import different types of data.\n\n-   `haven` : SPSS, Stata, or SAS\n-   `readxl` : Excel spreadsheets\n-   `readr` : csv, txt, tsv etc.\n\nHowever, we recommend using the `rio` package.\n\n![](images/rio_hex.png){fig-align=\"center\" width=\"125\"}\n\nThere are two main functions in the `rio` package, `import()` and `export()`. The `import()` function takes the file path as an input argument, while the `export()` function takes the object and destination file path as arguments.\n\nThe `import()` function has an additional argument `setclass` which needs to be set to `tibble` to import the data as a `tibble` (the workhorse of `tidyverse` workflows).\n\n![](images/tibble.jpg){fig-align=\"center\" width=\"100\"}\n\nThere are a number of differences between tibbles and data.frames. To see a full vignette about tibbles and how they differ from data.frame, please run `vignette(\"tibble\")` in the console and read through that vignette.\n\nSome major differences are:\n  \n  -   Input type remains unchanged - `data.frame` changes strings as factors; `tibble` will not\n-   Variable names remain unchanged - `data.frame` will remove spaces or add \"x\" before numeric column names. `tibble` will not.\n-   There are no `row.names()` for a `tibble`\n-   `tibble` print first ten rows and columns that fit on one screen\n\n#### Exercise {.unnumbered}\n\n1.  Import the provided .csv file into the RStudio environment using the method mentioned above.\n\n2.  Can you see anything apprearing on the RStudio Console pane once you have imported the file?\n  \n  3.  Can you see anything apprearing on the RStudio Environment pane once you have imported the file?\n  \n  4.  Import the provided .xls file into the RStudio environment using the method mentioned above.\n\n5.  Change the sheet to import as well as skip the first row. See the changes happen in the R code syntax in the bottom right pane of the GUI\n\n:::\n\n## Saving and Loading a compressed .rds file\n\n:::{style=\"text-align:justify\"}\n\n`.rds` is a file format native to R for saving compressed content. `.rds` files are not text files and are not human readable in their raw form. Each `.rds` file contains a single object, which makes it easy to assign its output directly to a single R object. This is not necessarily the case for `.RData` files, which makes `.rds` files safer to use.\n\nUse the `write_rds()` function from the `readr` package to write an `.rds` file. Save the previously loaded data, as an `.rds` file using this function. You can look at the help menu to know more on the syntax or you can type `?write_rds` in the Console pane.\n\nNow you can open your file explorer go to your working directory and check if the file has been saved. Similarly, you can use the `write_csv()` function from the `readr` package to write a `.csv` file.\n\n:::\n\n## Principles of Tidy Data\n\n### What is Tidy Data?\n\n:::{style=\"text-align:justify\"}\n\n> Tidy data is a way to describe data that's organized with a particular structure -- a rectangular structure, where each variable has its own column, and each observation has its own row. --- Hadley Wickham, 2014\n\n:::\n\n### Three Rules of Tidy Data\n\n:::{style=\"text-align:justify\"}\n\n1.  Each variable must have its own column.\n2.  Each observation must have its own row.\n3.  Each value must have its own cell.\n\nThese three rules are interrelated because it's impossible to only satisfy two of the three.\n\n:::\n\n![](images/tidy-1.png){fig-align=\"center\"}\n\n### Messy Data vs Tidy Data\n\n> Tidy datasets are all alike, but every messy dataset is messy in its own way. - Hadley Wickham\n\n![Source: R for Data Science (http://r4ds.had.co.nz/)](images/messy_tidy.png){fig-align=\"center\" width=\"500\"}\n\n![](images/tidy_messy.JPG){fig-align=\"center\" width=\"400\"}\n\n{{< pagebreak >}}\n\n![](images/untidy_tools.JPG){fig-align=\"center\" width=\"400\"}\n\n:::{style=\"text-align:justify\"}\n\nWorking with messy data can be messy!. You need to build custom tools from scratch each time you work with a new dataset.\n\nIllustrations from : <https://github.com/allisonhorst/stats-illustrations>\n  \n:::\n\n### Tidy data for more efficient data science\n\n:::{style=\"text-align:justify\"}\n  \nPackages like `tidyr` and `dplyr` can enable you to get on with analysing your data and start answering key questions rather than spending time in trying to clean the data.\n  \n:::\n\n![](images/tidy-2.png){fig-align=\"center\" width=\"400\"}\n\n{{< pagebreak >}}\n\n![](images/tidy_tools_1.JPG){fig-align=\"center\" width=\"200\"}\n\n:::{style=\"text-align:justify\"}\n\n*Note*\n  \n  *Tidy data allows you to be more efficient by using specialised tools built for the tidy workflow. There are a lot of tools specifically built to wrangle untidy data into tidy data.*\n  \n  ![](images/tidy_workflow.JPG){fig-align=\"center\" width=\"300\"}\n\nOne other advantage of working with Tidy data is that it makes it easier for collaboration, as your colleagues can use the same familiar tools rather than getting overwhelmed with all the work you did from scratch. It is also helpful for your future self as it becomes a consistent workflow and takes less adjustment time for any incremental changes.\n\n\\bigskip\n\nTidy data also makes it easier to reproduce analyses because they are easier to understand, update, and reuse. By using tools together that all expect tidy data as inputs, you can build and iterate really powerful workflows.\n\n:::\n\n## A word on Tibble\n\n:::{style=\"text-align:justify\"}\n\nWhen loading data into R using the RStudio GUI using `tidyverse`, the data is automatically saved as a `tibble`. A `tibble` is a data frame, but they have some new functionalities and properties to make our life easier. It is the single most important workhorse of `tidyverse`.\n\n![tibble() vs data.frame()](images/tibble_1.jpg){fig-align=\"center\" width=\"300\"}\n\n\nYou can change `data.frame` objects to a `tibble` using the `as_tibble()` function.\n\n:::\n\n## Working with Tibbles\n\n:::{style=\"text-align:justify\"}\n\nNow that you have imported data into RStudio its a good practice to have a look at the data. There are many ways you can do it within RStudio.\n\n1.  Through the Environment pane\n2.  `View()` function\n3.  Simply typing the name of the dataset in the Console\n\n\\bigskip\n\nSome other things you can do to have a look at your data are:\n  \n  1.  Checking the class of the dataset using `class()` function\n2.  Checking the structure of the dataset using `str()` function\n\n*Note*\n  \n  *`class()` and `str()` are not just limited to datasets, they can be used for any R objects.*\n  \n  \\bigskip\n\nSome additional tips for quickly looking at your data:\n  \n-   `head()`\n-   `tail()`\n-   `glimpse()`\n\n:::\n\n#### Exercise {.unnumbered}\n\n:::{style=\"text-align:justify\"}\n\n1.  Type the name of the dataset in the console and see what happens?\n  \n  2.  How many rows and columns can you visualize?\n  \n  3.  Now, try the head(), tail(), and glimpse() functions\n\n4.  Try to create a tibble manually in RStudio with a numeric, character, and factor variable. (Hint: vignette('tibble') )\n\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"embed-resources":true,"output-file":"fundamentals_dplyr.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}